# -*- coding: utf-8 -*-
"""prepare_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uKXr2W2T0BbUMYGSzXp9A9vN0ft2RwqD
"""

# prepare_data.py
import pandas as pd
import requests

# Define the API key
API_KEY = "44b5edc711ba40c8885a6d169dfefbf8"

# Define the base URL for BLS API requests
BLS_API_URL = "https://api.bls.gov/publicAPI/v2/timeseries/data/"

# Define the series IDs for the required data
SERIES_IDS = {
    "Total Non-Farm Employment": "CES0000000001",
    "Unemployment Rate": "LNS14000000",
}

# Load and clean the data
def prepare_data():
    all_data = []

    for series_name, series_id in SERIES_IDS.items():
        # Make a request to the BLS API
        response = requests.post(
            BLS_API_URL,
            json={
                "seriesid": [series_id],
                "startyear": "2022",
                "endyear": "2024",
                "registrationkey": API_KEY
            }
        )

        # Check for successful response
        if response.status_code == 200:
            data = response.json()

            if "Results" in data and "series" in data["Results"]:
                series_data = data["Results"]["series"][0]["data"]

                # Convert the data to a DataFrame
                df = pd.DataFrame(series_data)
                df["series_name"] = series_name

                # Select and rename columns
                df = df.rename(columns={"year": "date", "value": series_name})
                df["date"] = pd.to_datetime(df["date"] + df["periodName"], format="%Y%B")
                df = df[["date", series_name]]

                all_data.append(df)
        else:
            print(f"Failed to fetch data for {series_name}: {response.status_code}")

    # Combine all data into a single DataFrame
    if all_data:
        combined_df = pd.concat(all_data, axis=1).loc[:, ~pd.concat(all_data, axis=1).columns.duplicated()]

        # Sort by date
        combined_df = combined_df.sort_values("date").reset_index(drop=True)

        # Save to CSV for dashboard use
        combined_df.to_csv("prepared_data.csv", index=False)
        print("Data successfully prepared and saved.")
    else:
        print("No data was retrieved.")

if __name__ == "__main__":
    prepare_data()