# -*- coding: utf-8 -*-
"""bls_jobs_dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vJe0PbAtoFnONc6A8VJnQKT9Cd0woAIz
"""

import requests
import pandas as pd
import plotly.express as px
from bs4 import BeautifulSoup
import streamlit as st
from datetime import datetime

# Clear Streamlit's cache
st.cache_data.clear()
st.cache_resource.clear()

# Function to calculate percentage changes
def calculate_percentage_change(df, comparison_type):
    if comparison_type == "MoM":
        df["change"] = df["value"].pct_change() * 100
        title = "Percentage Change in Employment by Month"
    elif comparison_type == "YoY":
        df["change"] = df["value"].pct_change(periods=24) * 100
        title = "Percentage Change in Employment by Year"
    return df, title

# Function to fetch and parse data from BLS
def fetch_data(url):
    response = requests.get(url)
    soup = BeautifulSoup(response.content, 'html.parser')
    table = soup.find("table", {"id": "seriesDataTable1"})

    if table:
        rows = table.find_all("tr")
        data = []

        for row in rows:
            cols = row.find_all("td")
            if len(cols) > 0:
                year = cols[0].text.strip()
                period = cols[1].text.strip()
                try:
                    value = float(cols[3].text.strip().replace(",", "").split("\r")[0])
                    month_code = period[1:]
                    concatenated_date = f"{month_code}-{year}"
                    data.append({
                        "date": concatenated_date,
                        "value": value
                    })
                except (ValueError, IndexError):
                    continue

        # Clean data; convert the date string to a datetime object
        df = pd.DataFrame(data)
        df["date"] = pd.to_datetime(df["date"], format="%m-%Y", errors="coerce")
        # Drop rows where date parsing failed
        df = df.dropna(subset=["date"])
        return df
    else:
        return pd.DataFrame()  # Returns clean dataframe

# Function to determine if today is the 15th day of the month
def is_15th_or_first_run():
    today = datetime.now().day
    return today == 15 or "employment_df" not in st.session_state or "unemployment_df" not in st.session_state

# Streamlit app
st.title("BLS Employment and Unemployment Data Dashboard")

# Automatically fetch data on the 15th or during the first app run
if is_15th_or_first_run():
    with st.spinner("Fetching employment data..."):
        employment_url = "https://data.bls.gov/dataViewer/view/timeseries/CES0000000001"
        employment_df = fetch_data(employment_url)
        if not employment_df.empty:
            st.session_state.employment_df = employment_df
            st.success("Employment data fetched successfully!")
        else:
            st.error("Failed to fetch employment data.")


    with st.spinner("Fetching unemployment data..."):
        unemployment_url = "https://data.bls.gov/dataViewer/view/timeseries/LNS14000000"
        unemployment_df = fetch_data(unemployment_url)
        if not unemployment_df.empty:
            st.session_state.unemployment_df = unemployment_df
            st.success("Unemployment data fetched successfully!")
        else:
            st.error("Failed to fetch unemployment data.")

# Check if data exists in session state
if "employment_df" in st.session_state and not st.session_state.employment_df.empty:
    employment_df = st.session_state.employment_df

if "unemployment_df" in st.session_state and not st.session_state.unemployment_df.empty:
    unemployment_df = st.session_state.unemployment_df

    # Combine the datasets
    unemployment_df["type"] = "Unemployment Rate"
    employment_df["type"] = "Employment Level"
    combined_df = pd.concat([employment_df, unemployment_df])

    # Display the dataframe
    st.subheader("BLS Employment and Unemployment Data")
    st.dataframe(combined_df)

    # Create slicer for visualization
    data_type = st.selectbox(
        "Select Data Type:",
        ["Employment Level", "Unemployment Rate", "Employment Percentage Change by Month", "Employment Percentage Change by Year"]
    )

    # Create line charts of employment levels
    if data_type == "Employment Level" or data_type == "Unemployment Rate":
      # Filter data based on the selection
      filtered_df = combined_df[combined_df["type"] == data_type]

      fig = px.line(
            filtered_df,
            x="date",
            y="value",
            title=data_type,
            labels={"date": "Date", "value": data_type},
            template="simple_white"
        )
    else:
        # Apply percentage change to employment data only
        comparison_type = "MoM" if "Month" in data_type else "YoY"
        employment_df, title = calculate_percentage_change(employment_df, comparison_type)
        fig = px.line(
            employment_df,
            x="date",
            y="change",
            title=title,
            labels={"date": "Date", "change": "% Change"},
            template="simple_white"
        )

    st.plotly_chart(fig)
else:
    st.info("Data will be fetched and displayed automatically.")
